server:
  port: 8010

spring:
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    datasource:
      names: m1,m2
      #      配置数据源
      m1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://1.14.23.26:3306/heterogeneous1?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
        username: root
        password: QZT1234567890
      m2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://1.14.23.26:3307/heterogeneous2?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
        username: root
        password: QZT1234567890
#      m1:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://cdb-kx78gp5z.gz.tencentcdb.com:10004/heterogeneous1?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
#        username: root
#        password: QZT1234567890
#      m2:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://cdb-hitrd1v3.gz.tencentcdb.com:10115/heterogeneous2?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
#        username: root
#        password: QZT1234567890
    sharding:
      #      分库策略（水平）
      default-database-strategy:
        inline:
          sharding-column: cid
          algorithm-expression: m$->{cid % 2 + 1}
      #      分表策略（水平）
      tables:
        #        sys_admin分表策略
        #        数据结点包括:m1.sys_admin_1,m1.sys_admin_2,m2.sys_admin_1,m2.sys_admin_2,
        sys_remote_database_info:
          actual-data-nodes: m$->{1..2}.sys_remote_database_info
          table-strategy:
            inline:
              #              分片策略包括分片键和分片算法
              sharding-column: id
              algorithm-expression: sys_remote_database_info
          #          指定表的主键，且生成策略为SNOWFLAKE
          key-generator:
            type: SNOWFLAKE
            column: id

        sys_remote_database_panal:
          actual-data-nodes: m$->{1..2}.sys_remote_database_panal
          table-strategy:
            inline:
              #              分片策略包括分片键和分片算法
              sharding-column: id
              algorithm-expression: sys_remote_database_panal
          #          指定表的主键，且生成策略为SNOWFLAKE
          key-generator:
            type: SNOWFLAKE
            column: id

        sys_department_info:
          actual-data-nodes: m$->{1..2}.sys_department_info
          table-strategy:
            inline:
              #              分片策略包括分片键和分片算法
              sharding-column: id
              algorithm-expression: sys_department_info
          #          指定表的主键，且生成策略为SNOWFLAKE
          key-generator:
            type: SNOWFLAKE
            column: id

        sys_admin_login_log:
          actual-data-nodes: m$->{1..2}.sys_admin_login_log
          table-strategy:
            inline:
              #              分片策略包括分片键和分片算法
              sharding-column: id
              algorithm-expression: sys_admin_login_log
          #          指定表的主键，且生成策略为SNOWFLAKE
          key-generator:
            type: SNOWFLAKE
            column: id

        sys_admin:
          actual-data-nodes: m$->{1..2}.sys_admin_$->{1..2}
          table-strategy:
            inline:
              #              分片策略包括分片键和分片算法
              sharding-column: id
              algorithm-expression: sys_admin_$->{id % 2 + 1}
          #          指定表的主键，且生成策略为SNOWFLAKE
          key-generator:
            type: SNOWFLAKE
            column: id

        sys_remote_influx_info:
          actual-data-nodes: m$->{1..2}.sys_remote_influx_info
          table-strategy:
            inline:
              #              分片策略包括分片键和分片算法
              sharding-column: id
              algorithm-expression: sys_remote_influx_info
          #          指定表的主键，且生成策略为SNOWFLAKE
          key-generator:
            type: SNOWFLAKE
            column: id

      #     指定公共表
      broadcast-tables[0]: sys_remote_database_type


    props:
      sql:
        show: true
feign:
  okhttp:
    enabled: true

#mybatis:
#  mapper-locations:
#    - classpath:com/deltaqin/remoteData/mapper/*.xml
#ribbon:
#  ConnectTimeout: 3000 #服务请求连接超时时间（毫秒）
#  ReadTimeout: 3000 #服务请求处理超时时间（毫秒）
ribbon:
  ReadTimeout: 60000
  ConnectTimeout: 60000
