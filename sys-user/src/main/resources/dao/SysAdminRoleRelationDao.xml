<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deltaqin.sys.user.dao.SysAdminRoleRelationDao">
    <resultMap id="AdminRoleResultMap" type="com.deltaqin.sys.user.dto.AdminRole">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="icon" jdbcType="VARCHAR" property="icon" />
        <result column="email" jdbcType="VARCHAR" property="email" />
        <result column="nick_name" jdbcType="VARCHAR" property="nickName" />
        <result column="note" jdbcType="VARCHAR" property="note" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="login_time" jdbcType="TIMESTAMP" property="loginTime" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="phone" jdbcType="VARCHAR" property="phone" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="description" jdbcType="VARCHAR" property="description" />
    </resultMap>
    <!--批量新增回写主键支持-->
    <insert id="insertList">
        INSERT INTO sys_admin_role_relation (admin_id, role_id) VALUES
        <foreach collection="list" separator="," item="item" index="index">
            (#{item.adminId,jdbcType=BIGINT},
            #{item.roleId,jdbcType=BIGINT})
        </foreach>
    </insert>
    <select id="getAdminRole" resultMap="AdminRoleResultMap">
        select
            sa.*, r.`name`, r.description
        FROM
            sys_admin sa
        LEFT JOIN sys_admin_role_relation ar ON ar.admin_id = sa.id
        LEFT JOIN sys_role r ON r.id = ar.role_id
        WHERE
            ar.role_id = r.id and sa.id = ar.admin_id and ar.role_id = #{id}

    </select>
    <select id="getAdminRoleByName" resultMap="AdminRoleResultMap">
        select
            sa.*, r.`name`, r.description
        FROM
            sys_admin sa
        LEFT JOIN sys_admin_role_relation ar ON ar.admin_id = sa.id
        LEFT JOIN sys_role r ON r.id = ar.role_id
        WHERE
            ar.role_id = r.id and sa.id = ar.admin_id
            and sa.cid = #{cid}
            and (username LIKE concat(concat('%',#{username}),'%')
             or nick_name LIKE concat(concat('%',#{username}),'%'))


    </select>
    <select id="getRoleList" resultMap="com.deltaqin.sys.mapper.SysRoleMapper.BaseResultMap">
        select r.*
        from sys_admin_role_relation ar left join sys_role r on ar.role_id = r.id
        where ar.admin_id = #{adminId}
    </select>
    <select id="getResourceList" resultType="com.deltaqin.sys.model.SysResource">
        SELECT
            ur.id id,
            ur.create_time createTime,
            ur.`name` `name`,
            ur.url url,
            ur.description description,
            ur.category_id categoryId
        FROM
            sys_admin_role_relation ar
        LEFT JOIN sys_role r ON ar.role_id = r.id
        LEFT JOIN sys_role_resource_relation rrr ON r.id = rrr.role_id
        LEFT JOIN sys_resource ur ON ur.id = rrr.resource_id
        WHERE
            ar.admin_id = #{adminId}
        AND ur.id IS NOT NULL
        GROUP BY
            ur.id
    </select>
    <select id="getAdminIdList" resultType="java.lang.Long">
        SELECT
            DISTINCT ar.admin_id
        FROM
            sys_role_resource_relation rr
                LEFT JOIN sys_admin_role_relation ar ON rr.role_id = ar.role_id
        WHERE rr.resource_id=#{resourceId}
    </select>
    <select id="listAllByPage" resultMap="AdminRoleResultMap">
        select
            sa.*, r.`name`, r.description
        FROM
            sys_admin sa
        LEFT JOIN sys_admin_role_relation ar ON ar.admin_id = sa.id
        LEFT JOIN sys_role r ON r.id = ar.role_id
        WHERE
            ar.role_id = r.id and sa.id = ar.admin_id

    </select>
</mapper>
